/* eslint-disable react-hooks/exhaustive-deps */
import { BuyButton, ProductRow, TableCell } from '@/components/styled'
import { useAppDispatch, useAppSelector } from '@/redux/hooks'
import {
  checkAsDragged,
  getAllProductsRequest,
  pushToCart,
  removeFromDragged,
} from '@/redux/reducers/products/reducer'
import { getProducts } from '@/redux/reducers/products/selectors'
import { IProduct } from '@/redux/reducers/products/types'
import Head from 'next/head'
import { DragEvent, useEffect } from 'react'

const Home = () => {
  const dispatch = useAppDispatch()
  const products = useAppSelector(getProducts)

  useEffect(() => {
    if (!products) {
      dispatch(getAllProductsRequest())
    }
  }, [dispatch])

  const handleAddToCart = (id: string) => {
    dispatch(pushToCart({ id, count: 1 }))
  }

  const onDragStart = (e: DragEvent<HTMLDivElement>, item: IProduct) => {
    dispatch(checkAsDragged({ id: String(item.id) }))
  }
  const onDragLeave = (e: DragEvent<HTMLDivElement>) => {}
  const onDragEnd = (e: DragEvent<HTMLDivElement>) => {}
  const onDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault()
  }
  const onDrop = (e: DragEvent<HTMLDivElement>, item: string) => {
    e.preventDefault()
    if (item === 'item') {
      dispatch(removeFromDragged())
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <ProductRow>
          <TableCell>Title</TableCell>
          <TableCell>Description</TableCell>
          <TableCell>Price</TableCell>
          <TableCell>Available</TableCell>
          <TableCell>Action</TableCell>
        </ProductRow>
        <div>
          {products?.map((item: IProduct) => (
            <ProductRow
              key={item.id}
              onDragStart={(e) => onDragStart(e, item)}
              onDragLeave={(e) => onDragLeave(e)}
              onDragEnd={(e) => onDragEnd(e)}
              onDragOver={(e) => onDragOver(e)}
              onDrop={(e) => onDrop(e, 'item')}
              draggable={item.inStock}
              id={String(item.id)}
            >
              <TableCell>{item.title}</TableCell>
              <TableCell>{item.description}</TableCell>
              <TableCell>{item.price}</TableCell>
              <TableCell>{item.inStock ? 'In Stock' : 'Out Of Stock'}</TableCell>
              <TableCell>
                <BuyButton
                  type="button"
                  disabled={!item.inStock}
                  onClick={() => handleAddToCart(String(item.id))}
                >
                  Buy
                </BuyButton>
              </TableCell>
            </ProductRow>
          ))}
        </div>
      </div>
    </>
  )
}

export default Home
